{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","reject","table","makeTransaction","transaction","min","max","canProcess","Math","random","floor","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JACMA,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAACC,GAAD,OAAUC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGzBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAACC,GAAD,OAChCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAO,IAAIhB,SAAQ,SAACC,EAASgB,GAC3BhB,EAAQa,OAINX,EAAS,SAACW,GAAD,OAAkBT,QAAQa,MAAMJ,IAE/CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCrBnC,IAIMgB,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCC,EAAaC,KAAKC,SAAW,GAC7B3B,GAN2BuB,EAMO,IANFC,EAMO,IALtCE,KAAKE,MAAMF,KAAKC,UAAYH,EAAMD,EAAM,GAAKA,IAOpD,OAAO,IAAIrB,SAAQ,SAACC,EAASgB,GAC3Bf,YAAW,WACLqB,GACFtB,EAAQ,CAAE0B,GAAIP,EAAYO,GAAIvB,KAAMN,IAGtCmB,EAAOG,EAAYO,MAClB7B,OAID8B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAACF,GAChBtB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,K","file":"main.deae5ac6dc64c06dc1a4.js","sourcesContent":["// task-1\r\nconst delay = (ms) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// task-2\r\nconst users = [\r\n  { name: \"Mango\", active: true },\r\n  { name: \"Poly\", active: false },\r\n  { name: \"Ajax\", active: true },\r\n  { name: \"Lux\", active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map((user) =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const canProcess = Math.random() > 0.3;\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      }\r\n\r\n      reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}